#
# Licensed to Apereo under one or more contributor license
# agreements. See the NOTICE file distributed with this work
# for additional information regarding copyright ownership.
# Apereo licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file
# except in compliance with the License.  You may obtain a
# copy of the License at the following location:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

##
## Shibooleth Authentication
##
## JJ Fila
##

## This is the factory that supplies the concrete authentication class
#root=org.jasig.portal.security.provider.UnionSecurityContextFactory
#root.cas=org.jasig.portal.security.provider.cas.CasAssertionSecurityContextFactory
#root.cas=org.jasig.portal.security.provider.cas.clearpass.PasswordCachingCasAssertionSecurityContextFactory
#root.remote=org.jasig.portal.security.provider.RemoteUserSecurityContextFactory
#root.simple=org.jasig.portal.security.provider.SimpleSecurityContextFactory

## Change CasLoginUrl
#org.jasig.portal.channels.CLogin.CasLoginUrl=${environment.build.uportal.protocol}://${environment.build.uportal.server}/Shibboleth.sso/Login?target=${environment.build.uportal.protocol}://${environment.build.uportal.server}${environment.build.uportal.context}/Login
#org.jasig.portal.idp-login.IdpLoginUrl=${environment.build.uportal.protocol}://${environment.build.uportal.server}/Shibboleth.sso/Login?target=${environment.build.uportal.protocol}://${environment.build.uportal.server}${environment.build.uportal.context}/Login


## Enable multiple authentication systems
## This is the factory that supplies the concrete authentication class
#root.cas=org.jasig.portal.security.provider.cas.CasFilteredSecurityContextFactory
#root=org.jasig.portal.security.provider.RemoteUserSecurityContextFactory

##
##  CAS & Local Authentication
##  
##  The following is an example of configuring uPortal to use both CAS
##  and local user authentication (authentication by username and password
##  hash stored in the uPortal database).  It uses the UnionSecurityContext
##  to consider both these authentication methods and declares the required
##  tokens for all.  This approach requires the corresponding filter mappings
##  in web.xml (mapping both the CASValidateFilter and the StaticCasReceiptCacher
##  filter in front of the LoginServlet).
##
##  The bundled cas instance (http://localhost:8080/cas) also uses the user in
##  the uPortal database for authentication.
##

portal.protocol=http
portal.server=portal.ringling.edu:8080
portal.context=/uPortal

##
## Authentication Strategies Available in the Portal.
##

## CAS
#
cas.protocol=http
cas.server=portal.ringling.edu:8080
cas.context=/cas
cas.ticketValidationFilter.service=${portal.protocol}://${portal.server}${portal.context}/Login
cas.ticketValidationFilter.proxyReceptorUrl=/CasProxyServlet
cas.ticketValidationFilter.ticketValidator.server=${cas.protocol}://${cas.server}${cas.context}
cas.ticketValidationFilter.ticketValidator.proxyCallbackUrl=${portal.protocol}://${portal.server}${portal.context}/CasProxyServlet
org.apereo.portal.security.provider.cas.CasAssertionSecurityContextFactory.enabled=false
org.apereo.portal.security.provider.cas.CasAssertionSecurityContextFactory.credentialToken=ticket

## Simple (database)
#
org.apereo.portal.security.provider.SimpleSecurityContextFactory.enabled=false
org.apereo.portal.security.provider.SimpleSecurityContextFactory.principalToken=userName
org.apereo.portal.security.provider.SimpleSecurityContextFactory.credentialToken=password

## Answers where the user will be redirected when log out occurs.
## It would be better to escape the value of the url parameter, but since there are no parameters on the
## unescaped URL and since there are no further parameters on the logout URL, this does work.
#
logout.redirect=${cas.protocol}://${cas.server}${cas.context}/logout?url=${portal.protocol}://${portal.server}${portal.context}/Login

## Login URL, if specified the CLogin channel will display a Login link with
## this URL instead of the standard userName/password form.
#
org.apereo.portal.channels.CLogin.CasLoginUrl=${cas.protocol}://${cas.server}${cas.context}/login?service=${portal.protocol}://${portal.server}${portal.context}/Login

## URL of the CAS clearPass password service.  Note that value must also be listed in the CAS Service Registry as an
## allowed URL to access the password.
#
#org.apereo.portal.security.provider.cas.clearpass.PasswordCachingCasAssertionSecurityContextFactory.clearPassCasUrl=http://localhost:8080/cas/clearPass

## Flag to determine if the portal should convert CAS assertion attributes to user attributes - defaults to false
#
#org.apereo.portal.security.cas.assertion.copyAttributesToUserAttributes=true

## Flag to determine if credential attribute from CAS should be decrypted to password - defaults to false
#
#org.apereo.portal.security.cas.assertion.decryptCredentialToPassword=true

## Unsigned private key in PKCS8 format for credential decryption (for decryptCredentialToPassword)
#
#org.apereo.portal.security.cas.assertion.decryptCredentialToPasswordPrivateKey=/etc/cas/private.p8

## Algorithm to use with above private key (for decryptCredentialToPassword)
#
#org.apereo.portal.security.cas.assertion.decryptCredentialToPasswordAlgorithm="RSA"
